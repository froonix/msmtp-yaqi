#!/usr/bin/env bash
#########################################################################
#                                                                       #
# msmtp-yaqi: Yet Another Queue Implementation for MSMTP                #
# --------------------------------------------------------------------- #
# Version 0.1.0-dev by Christian Schr√∂tter <cs@fnx.li>                  #
#                                                                       #
# Inspired by msmtpq (Chris Gianniotis) and msmtpqueue (Martin Lambers) #
#                                                                       #
# This program is free software: you can redistribute it and/or modify  #
# it under the terms of the GNU General Public License as published by  #
# the Free Software Foundation, either version 3 of the License, or, at #
# your option, any later version.                                       #
#                                                                       #
#########################################################################

# Alias for echo command.
# Redirect it to STDERR.
function stderr
{
	echo "$@" 1>&2
}

# Multi-line version of stderr().
# Adds the program basename as prefix.
# And exits after outputting all lines.
function error
{
	local var

	for var in "$@"
	do
		stderr "$BASECMD: $var"
	done

	exit 1
}

# Debug:   log -d        [<MSG> ...]
# Info:    log           [<MSG> ...]
# Warning: log -w        [<MSG> ...]
# Error:   log -e <CODE> [<MSG> ...]
function log
{
	local msg exit=0 dbg=0
	local facility=mail.

	case "${1:-}"
	in
		-d)
			facility+=debug
			dbg=1
			shift
			;;

		-e)
			facility+=err
			exit="${2:-1}"
			shift 2
			;;

		-w)
			facility+=warn
			shift
			;;

		*)
			facility+=info
			;;
	esac

	# Hide debug messages without debug mode
	[[ "$dbg" -eq 1 && "${cfg[DEBUG]}" -ne 1 ]] \
	&& return

	for msg in "$@"
	do
		# Output message to STDERR (if enabled)
		[[ "${cfg[QUIET]}" -eq 0 ]] && stderr "$BASECMD: $msg"

		# Send message to syslog (if enabled)
		[[ "${cfg[SYSLOG]}" -eq 1 ]] && logger -t "${BASECMD}[$$]" -p "$facility" -- "$msg"

		# Write message to logfile (if enabled)
		[[ -n "${cfg[LOGFILE]}" ]] && echo "[$(date +"${cfg[LOGFILE_TIME_FORMAT]}")] $msg" >> "${cfg[LOGFILE]}"
	done

	# Error? Stop now!
	if [[ "$exit" -ne 0 ]]
	then
		log -d "exit $exit"
		exit "$exit"
	fi
}

# read_config <FILE>
function read_config
{
	local c l k v;
	declare -g -A cfg
	local -A tmp

	# DEFAULT CONFIG
	# msmtp-queue -e
	cfg[MSMTP]=msmtp
	cfg[QUEUE]=.msmtpq
	cfg[LOGFILE]=
	cfg[LOGFILE_TIME_FORMAT]="%Y-%m-%d %H:%M:%S"
	cfg[SYSLOG]=off
	cfg[QUIET]=off
	cfg[DEBUG]=off
	cfg[HEADER]=off
	cfg[ARCHIVE]=
	cfg[DEFER]=300
	cfg[UNDEV]=12
	cfg[LIMIT]=0

	# Copy default config array to user array
	# to set default values for unset elements.
	for k in "${!cfg[@]}"
	do
		tmp["$k"]="${cfg[$k]}"
	done

	if [[ -f "$1" ]]
	then
		# Strip comments from file
		c=$(grep -Ev '^(#|$)' "$1")

		while IFS= read -r l
		do
			if [[ "${#l}" -gt 0 ]]
			then
				# This is really very primitive.
				# But it does the job for now.
				k=$(cut -d = -f 1 <<< "$l")
				v=${l:$((${#k}+1))}
				tmp[$k]="$v"
			fi
		done <<< "$c"
	fi

	# Convert on/off values to integers
	# TODO: case-insensitive, true, yes, 1, ...
	[[ "${tmp[SYSLOG]}" == "on" ]] && cfg[SYSLOG]=1 || cfg[SYSLOG]=0
	[[ "${tmp[QUIET]}"  == "on" ]] && cfg[QUIET]=1  || cfg[QUIET]=0
	[[ "${tmp[DEBUG]}"  == "on" ]] && cfg[DEBUG]=1  || cfg[DEBUG]=0
	[[ "${tmp[HEADER]}" == "on" ]] && cfg[HEADER]=1 || cfg[HEADER]=0

	[[ -z "${tmp[QUEUE]}" ]] \
	&& log -e 78 "Empty QUEUE path in $(basename "$1")"

	# Queue directory: Absolute path or relative to $HOME
	[[ -n "${tmp[QUEUE]}" && "${tmp[QUEUE]:0:1}" != "/" ]] \
	&& cfg[QUEUE]="$HOME/${tmp[QUEUE]}" \
	|| cfg[QUEUE]="${tmp[QUEUE]}"

	[[ ! -d "${cfg[QUEUE]}" || ! -w "${cfg[QUEUE]}" ]] \
	&& log -e 78 "Invalid QUEUE path: ${cfg[QUEUE]}"

	# Logfile: Absolute path or relative to $HOME
	[[ -n "${tmp[LOGFILE]}" && "${tmp[LOGFILE]:0:1}" != "/" ]] \
	&& cfg[LOGFILE]="$HOME/${tmp[LOGFILE]}" \
	|| cfg[LOGFILE]="${tmp[LOGFILE]}"

	# Archive directory: Absolute path or relative to $HOME
	[[ -n "${tmp[ARCHIVE]}" && "${tmp[ARCHIVE]:0:1}" != "/" ]] \
	&& cfg[ARCHIVE]="$HOME/${tmp[ARCHIVE]}" \
	|| cfg[ARCHIVE]="${tmp[ARCHIVE]}"

	[[ -n "${cfg[ARCHIVE]}" ]] \
	&& [[ ! -d "${cfg[ARCHIVE]}" || ! -w "${cfg[ARCHIVE]}" ]] \
	&& log -e 78 "Invalid ARCHIVE path: ${cfg[ARCHIVE]}"

	# Convert elements to integers
	cfg[DEFER]=$(printf '%d' "${tmp[DEFER]}")
	cfg[UNDEV]=$(printf '%d' "${tmp[UNDEV]}")
	cfg[LIMIT]=$(printf '%d' "${tmp[LIMIT]}")

	# Check for negative integers
	[[ "${cfg[DEFER]}" -lt 0 ]] && cfg[DEFER]=0
	[[ "${cfg[UNDEV]}" -lt 0 ]] && cfg[UNDEV]=0
	[[ "${cfg[LIMIT]}" -lt 0 ]] && cfg[LIMIT]=0

	# Copy remaining items
	cfg[MSMTP]="${tmp[MSMTP]}"
	cfg[LOGFILE_TIME_FORMAT]="${tmp[LOGFILE_TIME_FORMAT]}"

	log -d "Read configuration from file $1"
	log -d "--------------------------------------------------"
	log -d "  \$cfg[MSMTP]=${cfg[MSMTP]}"
	log -d "  \$cfg[QUEUE]=${cfg[QUEUE]}"
	log -d "  \$cfg[LOGFILE]=${cfg[LOGFILE]}"
	log -d "  \$cfg[LOGFILE_TIME_FORMAT]=${cfg[LOGFILE_TIME_FORMAT]}"
	log -d "  \$cfg[SYSLOG]=${cfg[SYSLOG]}"
	log -d "  \$cfg[QUIET]=${cfg[QUIET]}"
	log -d "  \$cfg[DEBUG]=${cfg[DEBUG]}"
	log -d "  \$cfg[HEADER]=${cfg[HEADER]}"
	log -d "  \$cfg[ARCHIVE]=${cfg[ARCHIVE]}"
	log -d "  \$cfg[DEFER]=${cfg[DEFER]}"
	log -d "  \$cfg[UNDEV]=${cfg[UNDEV]}"
	log -d "  \$cfg[LIMIT]=${cfg[LIMIT]}"
	log -d "--------------------------------------------------"
}

# hold_queue [-u]
function hold_queue
{
	for file in "${cfg[QUEUE]}"/*-*-*,*
	do
		[[ ! -f "$file" ]] && continue

		# shellcheck disable=SC2086
		hold_mails ${1:-} "$(basename "$file" | cut -d , -f 1)"
	done
}

function purge_queue
{
	for file in "${cfg[QUEUE]}"/*-*-*,*
	do
		[[ ! -f "$file" ]] && continue
		holding "$file" && continue

		purge_mails "$(basename "$file" | cut -d , -f 1)"
	done
}

function run_queue
{
	local -i c=0
	local -i flush=0
	local -i current
	local -i state=0
	local file

	[[ "${1:-}" == "-f" ]] \
	&& flush=1; shift

	current=$(date +%s)
	for file in "${cfg[QUEUE]}"/*-*-*,*
	do
		[[ ! -f "$file" ]] && continue
		get_details "$file" -; ((c++))
		[[ "$queue_hold" -eq 1 ]] && continue

		if [[ "$flush" -eq 0 && "${cfg[DEFER]}" -gt 0 && "$queue_tries" -gt 0 && "$((current-queue_mtime))" -lt "$((2**(queue_tries-1)*cfg[DEFER]))" ]]
		then
			log -d "Deferring next delivery try: ID $queue_id (c=$current; m=$queue_mtime; t=$queue_tries)"
			continue
		fi

		send_mails "$queue_id" \
		|| state=$?

		[[ \
			"$state" -ne 0 && \
			"${cfg[UNDEV]}" -gt 0 && \
			"$((queue_tries+1))" -ge "${cfg[UNDEV]}"\
		 ]] \
		 && purge_mails "$queue_id"

		if [[ "$flush" -eq 0 && "${cfg[DEFER]}" -gt 0 && "${cfg[LIMIT]}" -gt 0 && "$c" -ge "${cfg[LIMIT]}" ]]
		then
			log -d "Per-run limit reached, stopping now..."
			break
		fi
	done

	return "$state"
}

# send_mails <ID> ...
send_mails()
{
	local q h='' f file
	local -i state=0
	local -i c

	for q in "$@"
	do
		q=$(basename "$q")
		file=""

		for f in "${cfg[QUEUE]}/$q",*
		do
			if [[ -f "$f" ]]
			then
				file=$f
				break;
			fi
		done

		if [[ -z "$file" ]]
		then
			stderr "Queue ID $q not found."
			state=66 # EX_NOINPUT
			continue
		fi

		get_header "$file"
		get_content "$file"
		get_details "$file"

		c=$((queue_tries+1))
		[[ "$queue_hold" -eq 1 ]] \
		&& h="HOLD; "

		if [[ "${cfg[HEADER]}" -eq 1 ]]
		then
			# Prepend current timestamp as new header.
			queue_content="X-MSMTP-Sent: $(date +'%a, %d %b %Y %T %z')"$'\n'"$queue_content"

			# Prepend try-counter as new header.
			[[ "$queue_hold" -eq 0 ]] && queue_content="X-MSMTP-Try: $c"$'\n'"$queue_content"
		fi

		# shellcheck disable=SC2086
		"${cfg[MSMTP]}" $queue_header \
		<<< "$queue_content" \
		|| state=$?

		if [[ "$state" -ne 0 ]]
		then
			log "Failed to send queued message: ID $q (${h}try=${queue_tries}$([[ "${cfg[UNDEV]}" -gt 0 ]] && echo "/${cfg[UNDEV]}"); status=${state})"

			if [[ "$queue_hold" -eq 0 ]]
			then
				mv "$file" "${cfg[QUEUE]}/$q,$c" \
				|| log -e 74 "Could not increment try-counter: ID $q ($queue_rtries -> $c)" # EX_IOERR
			fi

			continue
		fi

		purge_mails "$q"
		log "Queued message sent: ID $q"

		[[ -n "${cfg[ARCHIVE]}" && ! -e "${cfg[ARCHIVE]}/$q.eml" ]] \
		&& echo "$queue_content" > "${cfg[ARCHIVE]}/$q.eml"
	done

	return "$state"
}

# purge_mails <ID> ...
purge_mails()
{
	local q f file
	local -i state=0

	for q in "$@"
	do
		q=$(basename "$q")
		file=""

		for f in "${cfg[QUEUE]}/$q",*
		do
			if [[ -f "$f" ]]
			then
				file=$f
				break;
			fi
		done

		if [[ -z "$file" ]]
		then
			stderr "Queue ID $q not found."
			state=66 # EX_NOINPUT
			continue
		fi

		rm -f "$file" || log -e "$?" "Failed to remove message from queue: ID $q"
		log "Removed message from queue: ID $q"
	done

	return "$state"
}

# Display queue contents.
display_queue()
{
	local -i i=0
	local -i current
	local -i defer

	current=$(date +%s)
	for file in "${cfg[QUEUE]}"/*-*-*,*
	do
		[[ ! -f "$file" ]] && continue
		get_details "$file" -
		get_content "$file"
		((i++))

		echo
		echo -n " Message #$i in queue"

		if [[ "$queue_hold" -eq 1 ]]
		then
			echo " [HOLD]"
		elif [[ "$((queue_tries))" -gt 0 || "${cfg[UNDEV]}" -eq 1 ]]
		then
			echo -n " (try $((queue_tries+1))"
			[[ "${cfg[UNDEV]}" -gt 0 ]] \
			&& echo -n "/${cfg[UNDEV]}"
			echo ")"
		else
			echo
		fi

		echo "   ID: $queue_id"
		echo -n "   Date: "; date -d "@$(stat -c %Y "$file")" +'%Y-%m-%d %H:%M:%S %z'

		if [[ "$queue_tries" -gt 0 && "${cfg[DEFER]}" -gt 0 ]]
		then
			defer=$((2**(queue_tries-1)*cfg[DEFER]))

			[[ "$((current-queue_mtime))" -lt "$defer" ]] \
			&& printf '   Deferred: %s\n' "$(date -d @"$((queue_mtime+defer))" +'%Y-%m-%d %H:%M:%S %z')"
		fi

		awk '/^$/{exit} 1' <<< "$queue_content" | grep -Eshi '^(Subject|From|To|CC|BCC):' | sort -i | sed 's/^/   /'
		printf '   -- %dB (%dkB)\n' "$(wc -c <<< "$queue_content")" "$(du -k "$file" | cut -f 1)"
	done

	[[ "$i" -eq 0 ]] \
	&& error 'No mail in queue'

	echo
}

# Extract details from queue filename.
# Set 2nd param to get filemtime too.
function get_details
{
	local b
	declare -g queue_id
	declare -g -i queue_rtries=0
	declare -g -i queue_tries=0
	declare -g -i queue_mtime=0
	declare -g -i queue_hold=-1

	unset queue_id
	unset queue_tries
	unset queue_mtime

	b=$(basename "$1")
	queue_id=$(cut -d , -f 1 <<< "$b")
	queue_rtries=$(cut -d , -f 2 <<< "$b")
	queue_tries=${queue_rtries#-}

	holding "$b" \
	&& queue_hold=1 \
	|| queue_hold=0

	[[ -n "${2:-}" ]] \
	&& queue_mtime=$(stat -c %Y "$1")
}

# Get msmtp argument list from queue file.
get_header()
{
	declare -g queue_header
	queue_header=$(head -n 1 "$1" 2>/dev/null)
	[[ -z "$queue_header" ]] && log -e "$?" "Could not read header from queue file $1"
}

# Get real mail content from queue file.
get_content()
{
	declare -g queue_content
	queue_content=$(tail -n +2 "$1" 2>/dev/null)
	[[ -z "$queue_content" ]] && log -e "$?" "Could not read content from queue file $1"
}

# Insert mail from STDIN into queue.
# Queue locking not required here!
function enqueue_mail
{
	# $queue_file will be handled by cleanup()!
	# DO NOT USE THIS VARIABLE FOR OTHER THINGS.
	# The mentioned file will be deleted.
	declare -g queue_file
	local queue_id

	# This is race-condition-safe, or not?
	# Queue filename: Timestamp-Nanosecs-PID
	queue_id="$(date +%s-%N)-$(printf %05d $$)"
	queue_file="${cfg[QUEUE]}/$queue_id"

	# We don't need a queue lock for new files, because we're not
	# changing existing files. Theoretical it's not required to do
	# the following check, because race-conditions are impossible,
	# as long there's only one host writing to this queue directory.
	[[ -f "$queue_file" ]] || ls "$queue_file",* &>/dev/null \
	&& log -e 1 "Queue file already exists: ID $queue_id"

	# Write escaped arguments to temporary queue file.
	cat <<< "$(printf '%q\n' "$@" | tr '\n' ' ')" > "$queue_file" || log -e "$?" "Queue header write failed: ID $queue_id"

	if [[ "${cfg[HEADER]}" -eq 1 ]]
	then
		# Prepend current timestamp as new header.
		echo "X-MSMTP-Queue: $(date +'%a, %d %b %Y %T %z')" >> "$queue_file" \
		|| log -e "$?" "Queue header injection failed: ID $queue_id"
	fi

	# Write mail content to temporary queue file.
	cat | tr -d '\r' >> "$queue_file" || log -e "$?" "Queue content write failed: ID $queue_id"

	# Move queue file to final destination with retry-counter value "0" appended.
	mv "$queue_file" "$queue_file,0" || log -e "$?" "Queue file release failed: ID $queue_id"
	log "Added message to queue: ID $queue_id"
	unset queue_file
}

# Lock queue directory.
# Use -u to unlock it!
function lock_queue
{
	local lock="${cfg[QUEUE]}/.lock"
	local -i max=60 sec=0
	declare -g -i locked

	if [[ -z "${1:-}" ]]
	then
		# Locking with mkdir is a great and simple idea.
		# Thanks for this implementation, Chris Gianniotis!
		while [[ "${locked:-0}" -ne 1 && "$sec" -le "$max" ]]
		do log -d "Waiting for lock... ($sec/$max seconds)"

			# shellcheck disable=SC2015
			mkdir "$lock" 2>/dev/null \
			&& locked=1 \
			|| sleep 1
			((sec++))
		done

		[[ "${locked:-0}" -ne 1 ]] && \
			error "Could not get exclusive lock on queue! Waited for $max seconds." \
			      "Please remove queue directory if no other instance is running:" \
			      "" \
			      "  rmdir $(printf %q "$lock")" \
			      "" \
			      "Giving up now."

		log -d "We got it! Let's rumble."

	elif [[ "$1" == '-u' && "${locked:-0}" -eq 1 ]]
	then
		#log -d "Removing lockfile: $lock"
		rmdir "$lock"; locked=0
	fi
}

# Message hold?
function holding
{
	grep -qF ',-' <<< "$(basename "$1")"
	return $?
}

# hold_mails [-u] <ID> ...
hold_mails()
{
	local q n f file
	local -i state=0
	local -i action=1

	if [[ "${1:-}" == '-u' ]]
	then
		action=0
		shift
	fi

	for q in "$@"
	do
		q=$(basename "$q")
		file=""

		for f in "${cfg[QUEUE]}/$q",*
		do
			if [[ -f "$f" ]]
			then
				file=$f
				break;
			fi
		done

		if [[ -z "$file" ]]
		then
			stderr "Queue ID $q not found."
			state=66 # EX_NOINPUT
			continue
		fi

		get_details "$file"
		[[ "$queue_hold" -eq "$action" ]] && continue
		n=$queue_tries; [[ "$action" -eq 1 ]] && n=$((0-n))

		mv "$file" "${cfg[QUEUE]}/$q,$n" \
		|| log -e 74 "Could not (un)hold message: ID $q" # EX_IOERR
		[[ "$action" -eq 1 ]] && log "Message from queue hold: ID $q"
		[[ "$action" -ne 1 ]] && log "Message released into queue: ID $q"
	done

	return "$state"
}

# Trap callback.
function cleanup
{
	declare -g locked
	declare -g queue_file

	[[ -n "${queue_file:-}" ]] \
	&& log -d "Removing stale queue file: $queue_file" \
	&& rm -f "$queue_file" && unset queue_file

	[[ "${locked:-0}" -eq 1 ]] \
	&& lock_queue -u 2>/dev/null
}

export LANG=C
declare -i ec=0
set -u -o pipefail
BASECMD=$(basename "$0")
unset queue_file
unset locked
umask 0077

# Load user configuration.
# Or fallback to defaults.
read_config ~/.msmtpq.conf

# Remove queue locking
# and delete $queue_file
trap cleanup EXIT

if [[ "${1:-}" == '--q-mgmt' ]]
then
	BASECMD=msmtp-queue
	shift
fi

# msmtp-queue - queue management mode
if [[ "$BASECMD" == "msmtp-queue" ]]
then
	OP=${1:-}
	shift

	case "${OP:1}" in
		f|r|a|n|N|d|'')
			[[ -n "${1:-}" ]] && error "Too many arguments for option '$OP'"
			;;

		R|H|U|p)
			[[ -z "${1:-}" ]] && error "Too few arguments for option '$OP'"
			;;

		e)
			echo '############################################################'
			echo '# msmtp-yaqi example configuration file: ~/.msmtpq.conf    #'
			echo '#  Looks like Bash but it is a simple plaintext format!    #'
			echo '############################################################'
			echo
			echo '## Path to msmtp binary'
			echo '#MSMTP=msmtp'
			echo
			echo '## Path to queue directory. Relative to $''HOME path!'
			echo '##   mkdir -v ~/.msmtpq && chmod -c 0700 ~/.msmtpq'
			echo '#QUEUE=.msmtpq'
			echo
			echo '## Path to logfile.'
			echo '## Relative to $''HOME!'
			echo '## Disabled by default.'
			echo '#LOGFILE='
			echo
			echo '## Prefixed timestamp format for logfile.'
			echo '#LOGFILE_TIME_FORMAT=%Y-%m-%d %H:%M:%S'
			echo
			echo '## Log to syslog?'
			echo '## Facility mail.*'
			echo '#SYSLOG=off'
			echo
			echo '## Output log messages to STDERR too?'
			echo '## Facility: mail.{debug,info,warn,err}'
			echo '#QUIET=off'
			echo
			echo '## Enable all debug messages? (Only for development!)'
			echo '## Will be logged to file and syslog too if enabled.'
			echo '#DEBUG=off'
			echo
			echo '## Add additional headers at enqueue and while sending?'
			echo '## Contains enqueue timestamp and internal retry counter.'
			echo '#HEADER=off'
			echo
			echo '## Sent mails archive directory.'
			echo '## Relative to $''HOME path!'
			echo '#ARCHIVE='
			echo
			echo '## Wait time after failed delivery tries.'
			echo '## Will be doubled after each failed retry!'
			echo '## State estimated per message, not globally.'
			echo '## Always and only calculated by enqueue time.'
			echo '## Time in seconds. Use "0" to disable it.'
			echo '#DEFER=300'
			echo
			echo '## Count message as undeliverable after <n> retries.'
			echo '## The message will be deleted from queue and is lost.'
			echo '## Use "0" to disable this feature. (Not recommended!)'
			echo '## Estimate your best value: $''((2 ** (<n> - 1) * DEFER))'
			echo '#UNDEV=12'
			echo
			echo '## Maximum elements per run with -r.'
			echo '## Works only, when DEFER is enabled.'
			echo '## This feature is disabled by default.'
			echo '#LIMIT=0'
			exit 0
			;;

		h)
			stderr "Usage: msmtpq [sendmail options]"
			stderr
			stderr "    or msmtpq --q-mgmt <OP> [<ARGS> ...]"
			stderr "    or msmtp-queue <OP> [<ARGS> ...]"
			stderr
			stderr "Yet Another Queue Implementation for MSMTP"
			stderr
			stderr "Sendmail mode:"
			stderr
			stderr "  Just send your mail content to STDIN."
			stderr "  Your message will be added to the queue."
			stderr "  Don't forget to setup a queue-run cronjob!"
			stderr "  Otherwise it'll be held forever in queue."
			stderr
			stderr "Queue management options:"
			stderr
			stderr "  -f             flush mail queue (force delivery)"
			stderr "  -r             run mail queue (honor wait times)"
			stderr "  -R [<ID> ...]  send selected mail(s) from queue"
			stderr "  -H [<ID> ...]  hold selected mail(s) in queue (do not deliver)"
			stderr "  -U [<ID> ...]  release selected mail(s) from hold (deliver again)"
			stderr "  -p [<ID> ...]  purge selected mail(s) from queue"
			stderr "  -a             purge all mails from queue"
			stderr "  -n             hold all mails at queue"
			stderr "  -N             unhold all mails at queue"
			stderr "  -d             display mails in queue"
			stderr "  -e             show example config"
			stderr "  -h             show help message"
			exit 0
			;;

		*)
			error "unrecognized option '$OP'" \
			      "Try '-h' for more information."
			;;
	esac

	log -d "Switching to queue management mode..."

	lock_queue
	case "${OP:1}"
	in

		f) run_queue   -f      ; ec=$? ;; # flush queue
		r) run_queue           ; ec=$? ;; # run the queue (cron)
		R) send_mails     "$@" ; ec=$? ;; # send individual mail(s)
		H) hold_mails     "$@" ; ec=$? ;; # hold individual mail(s)
		U) hold_mails  -u "$@" ; ec=$? ;; # unhold individual mail(s)
		p) purge_mails    "$@" ; ec=$? ;; # purge individual mail(s)
		a) purge_queue         ; ec=$? ;; # purge all mails in queue
		n) hold_queue          ; ec=$? ;; # hold all mails at queue
		N) hold_queue  -u      ; ec=$? ;; # unhold all mails at queue
		*) display_queue       ; ec=$? ;; # display queue (default)

	esac
	lock_queue -u
else
	enqueue_mail "$@"
fi

exit "$ec"
